name: JSON Validation

run-name: ${{ github.actor }} triggered a check

on:
  pull_request:
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - run: echo "ðŸŽ‰ The job was automatically triggered by a ${{ github.event_name }} event."
      
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install jq
        
      - name: Collect changed file name
        id: files
        uses: jitterbit/get-changed-files@v1

      - name: Validate JSON
        id: validate
        run: |
          # Get the list of changed JSON files from the environment file
          json_files=$(echo "$steps.files.outputs.all" | grep '\.json$')

          echo "Files: $json_files"
          
          failed_files=""

          # Loop through JSON files and validate each one
          for file in $json_files; do
            if ! (jq -e '
              # Check if the file contains valid JSON
              try (. | fromjson | . != null) catch false as $valid_json |
              
              # Check for the "description" property (optional)
              .description? as $desc |
              
              # Check for the "socials" property (optional)
              .socials? as $socials |
              
              # Check if the "socials" property is an object with valid URLs
              ($socials == null or
                ($socials | objects | all(. as $value | ($value | strings | test("^https?://"))))) and
              
              # Check that there are no additional properties
              (keys - ["description", "socials"] | length == 0)
            ' "$file"); then
              failed_files="$failed_files $file"
            fi
          done

          # Output the list of failed files
          echo "::set-output name=failed_files::$failed_files"

          echo "Failed checks: $failed_files"

      - name: Debug Output
        run: |
          echo "Changed files:"
          cat $GITHUB_EVENT_PATH
          echo "$steps.validate.outputs.failed_files"
        if: always()
          
  check_issues:
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: Check JSON issues
        id: check-issues
        run: |
          failed_files="${{ needs.validate.outputs.failed_files }}"
          if [ -n "$failed_files" ]; then
            echo "JSON validation failed for the following files:"
            for file in $failed_files; do
              echo "- $file"
            done
            # Exit with code 1 to indicate failure
            exit 1
          else
            echo "JSON validation passed for all files."
          fi
